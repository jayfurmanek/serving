# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM ubuntu:focal as base_build

ARG TF_SERVING_VERSION_GIT_BRANCH=master
ARG TF_SERVING_VERSION_GIT_COMMIT=HEAD

LABEL maintainer=Jason.Furmanek@amd.com
LABEL tensorflow_serving_github_branchtag=${TF_SERVING_VERSION_GIT_BRANCH}
LABEL tensorflow_serving_github_commit=${TF_SERVING_VERSION_GIT_COMMIT}

ARG ROCM_DEB_REPO=https://repo.radeon.com/rocm/apt/5.3/
ARG ROCM_BUILD_NAME=ubuntu
ARG ROCM_BUILD_NUM=main
ARG ROCM_PATH=/opt/rocm-5.3.0
ARG GPU_DEVICE_TARGETS="gfx900 gfx906 gfx908 gfx90a gfx1030"

ARG DEBIAN_FRONTEND=noninteractive
ENV TF_NEED_ROCM 1
ENV HOME /root/
ENV HIP_PLATFORM=amd
RUN apt-get --allow-unauthenticated update && apt install -y wget software-properties-common

# Add rocm repository
RUN apt-get clean all
RUN wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add -;
RUN bin/bash -c 'if [[ $ROCM_DEB_REPO == https://repo.radeon.com/rocm/*  ]] ; then \
      echo "deb [arch=amd64] $ROCM_DEB_REPO $ROCM_BUILD_NAME $ROCM_BUILD_NUM" > /etc/apt/sources.list.d/rocm.list; \
    else \
      echo "deb [arch=amd64 trusted=yes] $ROCM_DEB_REPO $ROCM_BUILD_NAME $ROCM_BUILD_NUM" > /etc/apt/sources.list.d/rocm.list ; \
    fi'

RUN apt-get update && apt-get install -y --no-install-recommends \
        automake \
        build-essential \
        ca-certificates \
        curl \
        git \
        libfreetype6-dev \
        libtool \
        libcurl3-dev \
        libzmq3-dev \
        mlocate \
        openjdk-8-jdk\
        openjdk-8-jre-headless \
        pkg-config \
        python-dev \
        software-properties-common \
        swig \
        unzip \
        wget \
        zip \
        zlib1g-dev \
        python3-distutils \
        python-distutils-extra

# Install rocm pkgs
# For precompiled miopen kernels search for all unversioned packages
# if search fails it will abort so use true to avoid case where search fails
RUN MIOPENKERNELS=$( \
                    apt-cache search --names-only miopenkernels | \
                    awk '{print $1}' | \
                    grep -F -v . || \
                    true \
    ) && \
    apt-get update --allow-insecure-repositories && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated \
    rocm-dev rocm-libs rccl ${MIOPENKERNELS} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add target file to help determine which device(s) to build for
RUN printf '%s\n' > ${ROCM_PATH}/bin/target.lst ${GPU_DEVICE_TARGETS}
RUN touch ${ROCM_PATH}/.info/version

# Install python 3.7.
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && apt-get install -y \
    python3.7 python3.7-dev python3-pip python3.7-venv && \
    rm -rf /var/lib/apt/lists/* && \
    python3.7 -m pip install pip --upgrade && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 0

# Make python3.7 the default python version
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.7 0

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py && \
    rm get-pip.py

RUN pip3 --no-cache-dir install \
    future>=0.17.1 \
    grpcio \
    h5py \
    keras_applications>=1.0.8 \
    keras_preprocessing>=1.1.0 \
    mock \
    numpy \
    portpicker \
    requests \
     --ignore-installed six>=1.12.0

# Set up Bazel
ENV BAZEL_VERSION 5.1.1
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Build TensorFlow with the ROCm configuration
ENV CI_BUILD_PYTHON python

ENV HCC_HOME=$ROCM_PATH/hcc
ENV HIP_PATH=$ROCM_PATH/hip
ENV OPENCL_ROOT=$ROCM_PATH/opencl
ENV PATH="$HCC_HOME/bin:$HIP_PATH/bin:${PATH}"
ENV PATH="$ROCM_PATH/bin:${PATH}"
ENV PATH="$OPENCL_ROOT/bin:${PATH}"


# Set TMP for nvidia build environment
ENV TMP="/tmp"

# Download TF Serving sources (optionally at specific commit).
WORKDIR /tensorflow-serving
RUN curl -sSL --retry 5 https://github.com/tensorflow/serving/tarball/${TF_SERVING_VERSION_GIT_COMMIT} | tar --strip-components=1 -xzf -

FROM base_build as binary_build
# Build, and install TensorFlow Serving
ARG TF_SERVING_BUILD_OPTIONS="--config=release"
RUN echo "Building with build options: ${TF_SERVING_BUILD_OPTIONS}"
ARG TF_SERVING_BAZEL_OPTIONS=""
RUN echo "Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}"

# Download tensorflow-rocm for org_tensorflow override
ENV ROCM_TF_FORK_REPO="https://github.com/ROCmSoftwarePlatform/tensorflow-upstream"
ENV ROCM_TF_FORK_BRANCH="develop-upstream"
RUN rm -rf /tmp/tensorflow-upstream || true && \
    git clone -b ${ROCM_TF_FORK_BRANCH} ${ROCM_TF_FORK_REPO} /tmp/tensorflow-upstream

RUN export N_BUILD_JOBS=$( \
                    grep -c ^processor /proc/cpuinfo \
                  )
RUN TF_GPU_COUNT=$( \
                    lspci|grep 'controller'|grep 'AMD/ATI'|wc -l \
                  )
ENV TF_TESTS_PER_GPU 1
RUN N_TEST_JOBS=$( \
#                   expr ${TF_GPU_COUNT} \* ${TF_TESTS_PER_GPU} \
                    ${TF_GPU_COUNT} \
                 )

RUN bazel test --color=yes --curses=yes --copt="-fPIC"\
    --override_repository=org_tensorflow=/tmp/tensorflow-upstream \
    --crosstool_top=@local_config_rocm//crosstool:toolchain \
    --define=using_rocm_hipcc=true \
    --define=tensorflow_mkldnn_contraction_kernel=0 \
    --repo_env TF_NEED_ROCM=1 \
    --jobs=HOST_CPUS \
    --local_test_jobs=HOST_CPUS \
    --test_env=TF_GPU_COUNT=$TF_GPU_COUNT \
    --test_env=TF_TESTS_PER_GPU=$TF_TESTS_PER_GPU \
    --test_env=HSA_TOOLS_LIB=libroctracer64.so \
    --test_timeout 600,900,2400,7200 \
    ${TF_SERVING_BAZEL_OPTIONS} \
    --verbose_failures \
    --output_filter=DONT_MATCH_ANYTHING \
    --action_env ROCM_PATH=/opt/rocm-5.3.0 \
    ${TF_SERVING_BUILD_OPTIONS} \
    //tensorflow_serving/...

FROM binary_build as clean_build
# Clean up Bazel cache when done.
RUN bazel clean --expunge --color=yes && \
    rm -rf /root/.cache
CMD ["/bin/bash"]

