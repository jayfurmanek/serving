# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#FROM rocm/dev-centos-7:5.3 as base_build
FROM centos:centos7.9.2009 as base_build

ARG TF_SERVING_VERSION_GIT_BRANCH=r2.10
ARG TF_SERVING_VERSION_GIT_COMMIT=f44ac27514625c522bb010e5822b7d276fff986b

LABEL maintainer=Jason.Furmanek@amd.com
LABEL tensorflow_serving_github_branchtag=${TF_SERVING_VERSION_GIT_BRANCH}
LABEL tensorflow_serving_github_commit=${TF_SERVING_VERSION_GIT_COMMIT}

ARG ROCM_ROM_REPO=https://repo.radeon.com/amdgpu/5.3/rhel/7.9/main/x86_64
ARG ROCM_BUILD_NAME=ubuntu
ARG ROCM_BUILD_NUM=main
ARG ROCM_PATH=/opt/rocm-5.3.0
ARG GPU_DEVICE_TARGETS="gfx900 gfx906 gfx908 gfx90a gfx1030"

ARG DEBIAN_FRONTEND=noninteractive
ENV TF_NEED_ROCM 1
ENV HOME /root/
ENV HIP_PLATFORM=amd

COPY amdgpu.repo /etc/yum.repos.d/
COPY rocm.repo /etc/yum.repos.d/
RUN yum install -y epel-release
RUN yum repolist
RUN yum clean all
RUN yum install -y \
        wget \
        swig \
        libtool \
        automake \
        curl \
        unzip \
        zip \
        pkg-config \
        perl-File-BaseDir \
        perl-URI-Encode \
        rocm-dev  \
        rocm-libs \
        rccl \
        miopenkernels*

#RUN apt-get update && apt-get install -y --no-install-recommends \
#        automake \
#        build-essential \
#        ca-certificates \
#        curl \
#        git \
#        libfreetype6-dev \
#        libtool \
#        libcurl3-dev \
#        libzmq3-dev \
#        mlocate \
#        openjdk-8-jdk\
#        openjdk-8-jre-headless \
#        pkg-config \
#        python-dev \
#        software-properties-common \
#        swig \
#        unzip \
#        wget \
#        zip \
#        zlib1g-dev \
#        python3-distutils \
#        python-distutils-extra

# Install rocm pkgs
# For precompiled miopen kernels search for all unversioned packages
# if search fails it will abort so use true to avoid case where search fails
#RUN MIOPENKERNELS=$( \
#                    apt-cache search --names-only miopenkernels | \
#                    awk '{print $1}' | \
#                    grep -F -v . || \
#                    true \
#    ) && \
#    apt-get update --allow-insecure-repositories && \
#    DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated \
#    rocm-dev rocm-libs rccl ${MIOPENKERNELS} && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*

# Add target file to help determine which device(s) to build for
RUN printf '%s\n' > ${ROCM_PATH}/bin/target.lst ${GPU_DEVICE_TARGETS}
RUN touch ${ROCM_PATH}/.info/version

#COPY CentOS-SCLo-scl.repo /etc/yum.repos.d
#COPY CentOS-SCLo-scl-rh.repo /etc/yum.repos.d
RUN yum install -y centos-release-scl
#RUN yum install -y devtoolset-7-gcc*
RUN yum install -y devtoolset-9-gcc*
#RUN scl enable devtoolkit-7 bash
#RUN source /opt/rh/devtoolset-7/enable
RUN source /opt/rh/devtoolset-9/enable
#RUN gcc --version
#RUN echo $PATH
#ENV PATH=/opt/rh/devtoolset-7/root/usr/bin:$PATH
ENV PATH=/opt/rh/devtoolset-9/root/usr/bin:$PATH
RUN gcc --version
#RUN /opt/rh/devtoolset-7/root/usr/bin/gcc --version
#
RUN yum install -y \
        make \
        libffi-devel \
        openssl-devel \
        zlib-devel \
        which \
        git \
        patch

# Install python 3.7.
COPY build_and_install_python.sh /install/
RUN /install/build_and_install_python.sh "3.7.7"
ENV PATH=/usr/local/bin:$PATH
RUN python3 -m pip install --user --upgrade pip
#RUN add-apt-repository ppa:deadsnakes/ppa && \
#    apt-get update && apt-get install -y \
#    python3.7 python3.7-dev python3-pip python3.7-venv && \
#    rm -rf /var/lib/apt/lists/* && \
#    python3.7 -m pip install pip --upgrade && \
#    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 0
#
# Make python3.7 the default python version
# RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.7 0

#RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
#    python3 get-pip.py && \
#    rm get-pip.py

#RUN pip3 --no-cache-dir install \
RUN ln -fs /usr/local/bin/python3.7 /usr/local/bin/python3
RUN python3 --version
RUN ls -l /usr/local/bin
RUN which python3
RUN echo $PATH
RUN python3 -m pip list
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install --upgrade setuptools
RUN python3 -m pip install --upgrade wheel
RUN python3 -m pip install \
    numpy \
    portpicker \
    requests \
    h5py \
    mock \
    keras_applications>=1.0.8 \
    keras_preprocessing>=1.1.0 \
    future>=0.17.1 \
    grpcio \
     --ignore-installed six>=1.12.0

RUN python3 -m pip list

# Set up Bazel
ENV BAZEL_VERSION 5.1.1
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Build TensorFlow with the ROCm configuration
ENV CI_BUILD_PYTHON python3

ENV HCC_HOME=$ROCM_PATH/hcc
ENV HIP_PATH=$ROCM_PATH/hip
ENV OPENCL_ROOT=$ROCM_PATH/opencl
ENV PATH="$HCC_HOME/bin:$HIP_PATH/bin:${PATH}"
ENV PATH="$ROCM_PATH/bin:${PATH}"
ENV PATH="$OPENCL_ROOT/bin:${PATH}"


# Set TMP for nvidia build environment
ENV TMP="/tmp"

# Download TF Serving sources (optionally at specific commit).
WORKDIR /tensorflow-serving
RUN curl -sSL --retry 5 https://github.com/tensorflow/serving/tarball/${TF_SERVING_VERSION_GIT_COMMIT} | tar --strip-components=1 -xzf -

FROM base_build as binary_build
# Build, and install TensorFlow Serving
ARG TF_SERVING_BUILD_OPTIONS="--config=release"
RUN echo "Building with build options: ${TF_SERVING_BUILD_OPTIONS}"
ARG TF_SERVING_BAZEL_OPTIONS=""
RUN echo "Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}"

RUN chmod 777 /opt/rocm-5.3.0/bin/rocm_agent_enumerator

# Download tensorflow-rocm for org_tensorflow override
ENV ROCM_TF_FORK_REPO="https://github.com/ROCmSoftwarePlatform/tensorflow-upstream"
ENV ROCM_TF_FORK_BRANCH="r2.10-rocm-enhanced"
RUN rm -rf /tmp/tensorflow-upstream || true && \
    git clone -b ${ROCM_TF_FORK_BRANCH} ${ROCM_TF_FORK_REPO} /tmp/tensorflow-upstream

RUN bazel build --color=yes --curses=yes --copt="-fPIC"\
    --override_repository=org_tensorflow=/tmp/tensorflow-upstream \
    --crosstool_top=@local_config_rocm//crosstool:toolchain \
    --define=using_rocm_hipcc=true \
    --define=tensorflow_mkldnn_contraction_kernel=0 \
    --repo_env TF_NEED_ROCM=1 \
    ${TF_SERVING_BAZEL_OPTIONS} \
    --verbose_failures \
    --output_filter=DONT_MATCH_ANYTHING \
    --action_env ROCM_PATH=/opt/rocm-5.3.0 \
    ${TF_SERVING_BUILD_OPTIONS} \
    tensorflow_serving/model_servers:tensorflow_model_server && \
    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server \
    /usr/local/bin/

# Build and install TensorFlow Serving API
RUN bazel build --color=yes --curses=yes \
    --override_repository=org_tensorflow=/tmp/tensorflow-upstream \
    --crosstool_top=@local_config_rocm//crosstool:toolchain \
    --define=using_rocm_hipcc=true \
    --define=tensorflow_mkldnn_contraction_kernel=0 \
    --repo_env TF_NEED_ROCM=1 \
    ${TF_SERVING_BAZEL_OPTIONS} \
    --verbose_failures \
    --output_filter=DONT_MATCH_ANYTHING \
    --action_env ROCM_PATH=/opt/rocm-5.3.0 \
    ${TF_SERVING_BUILD_OPTIONS} \
    tensorflow_serving/tools/pip_package:build_pip_package && \
    bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package \
    /tmp/pip && \
    pip --no-cache-dir install --upgrade \
    /tmp/pip/tensorflow_serving_api_gpu-*.whl && \
    rm -rf /tmp/pip

FROM binary_build as clean_build
# Clean up Bazel cache when done.
RUN bazel clean --expunge --color=yes && \
    rm -rf /root/.cache
CMD ["/bin/bash"]

